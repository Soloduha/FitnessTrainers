// <auto-generated />
using FitnessTrainersDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace FTDataBase.Migrations
{
    [DbContext(typeof(FTContext))]
    [Migration("20180223063450_Initialize DB")]
    partial class InitializeDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FitnessTrainersDB.Entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.ClientMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int>("MetricId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MetricId");

                    b.ToTable("ClientMetrics");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(100);

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13);

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<int?>("ContactId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int?>("GalleryId");

                    b.Property<string>("WorkSchedule")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.HasIndex("GalleryId");

                    b.ToTable("Gyms");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("GaleryId");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("GaleryId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.TrainersSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SkillId");

                    b.Property<int>("TrainerId");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainersSkills");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("GymId");

                    b.Property<int>("ScheduleId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusId");

                    b.Property<int>("TrainerId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.TrainingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("TrainingStatuses");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.TrainingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("TrainingTypes");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("DayOfBirth");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200);

                    b.Property<int>("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("GymId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ZoneTypeId");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("ZoneTypeId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.ZoneType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("ZoneTypes");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Client", b =>
                {
                    b.HasBaseType("FitnessTrainersDB.Entity.User");

                    b.Property<int>("GoalId");

                    b.HasIndex("GoalId");

                    b.ToTable("Clients");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Trainer", b =>
                {
                    b.HasBaseType("FitnessTrainersDB.Entity.User");

                    b.Property<int?>("GalleryId");

                    b.Property<string>("Overview")
                        .HasMaxLength(500);

                    b.HasIndex("GalleryId");

                    b.ToTable("Trainers");

                    b.HasDiscriminator().HasValue("Trainer");
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.ClientMetrics", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Client", "Client")
                        .WithMany("ClientMetrics")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.Metric", "Metric")
                        .WithMany("ClientMetrics")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Gym", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Address", "Address")
                        .WithMany("Gyms")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.Contact", "Contact")
                        .WithMany("Gyms")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.Gallery", "Gallery")
                        .WithMany("Gyms")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Photo", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Gallery", "Gallery")
                        .WithMany("Photos")
                        .HasForeignKey("GaleryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Schedule", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Client", "Client")
                        .WithMany("Schedules")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.TrainersSkills", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Skill", "Skill")
                        .WithMany("TrainersSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.Trainer", "Trainer")
                        .WithMany("TrainersSkills")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Training", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Gym", "Gym")
                        .WithMany("Trainings")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.Schedule", "Schedule")
                        .WithMany("Trainings")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.TrainingStatus", "TrainingStatus")
                        .WithMany("Trainings")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.Trainer", "Trainer")
                        .WithMany("Trainings")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.TrainingType", "TrainingType")
                        .WithMany("Trainings")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.User", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.Contact", "Contact")
                        .WithMany("Users")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Zone", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Gym", "Gym")
                        .WithMany("Zones")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FitnessTrainersDB.Entity.ZoneType", "ZoneType")
                        .WithMany("Zones")
                        .HasForeignKey("ZoneTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Client", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Goal", "Goal")
                        .WithMany("Clients")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FitnessTrainersDB.Entity.Trainer", b =>
                {
                    b.HasOne("FitnessTrainersDB.Entity.Gallery", "Gallery")
                        .WithMany("Trainers")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
